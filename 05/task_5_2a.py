# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
network_and_mask = input("IP адрес вида ххх.ххх.ххх.ххх/уу ")
ip = network_and_mask.split("/")[0]
mask = network_and_mask.split("/")[1]
ip_array = ip.split(".")

bit_mask = "1" * int(mask) + "0" * (32 - int(mask)) #convert mask to bits
oct_1 = int(bit_mask[0:8],2)
oct_2 = int(bit_mask[8:16],2)
oct_3 = int(bit_mask[16:24],2)
oct_4 = int(bit_mask[24:32],2)

bit_ip = "{:08b}{:08b}{:08b}{:08b}".format(int(ip_array[0]), int(ip_array[1]), int(ip_array[2]), int(ip_array[3]))
network_bit_ip = bit_ip[0:int(mask)] + "0" * (32 - int(mask))
ip_oct_1 = int(network_bit_ip[0:8], 2)
ip_oct_2 = int(network_bit_ip[8:16], 2)
ip_oct_3 = int(network_bit_ip[16:24], 2)
ip_oct_4 = int(network_bit_ip[24:32], 2)

print("Network:\n")
print("{:<8}  {:<8}  {:<8}  {:<8}".format(ip_oct_1, ip_oct_2, ip_oct_3, ip_oct_4))
print("{:08b}  {:08b}  {:08b}  {:08b}".format(ip_oct_1, ip_oct_2, ip_oct_3, ip_oct_4))
print("\nMask:\n")
print(f"/{mask}")
print("{:<8}  {:<8}  {:<8}  {:<8}".format(oct_1, oct_2, oct_3, oct_4))
print("{:08b}  {:08b}  {:08b}  {:08b}".format(oct_1, oct_2, oct_3, oct_4))